<launch>
  <arg name="launch_driver" default="true" description="do launch driver"/>
<!--  <arg name="vehicle_mirror_param_file" description="path to the file of vehicle mirror position yaml"/>-->
  <arg name="pointcloud_container_name" default="pointcloud_container"/>
  <arg name="vehicle_id" default="$(env VEHICLE_ID default)"/>
  <arg name="yolox_model" default="yolox_tiny"  description="yolox_tiny, yolox-sPlus-T4-960x960-pseudo-finetune"/>
  <arg name="yolox_launch_file" default="yolox_tiny"  description="yolox_tiny, yolox_s_plus_opt or multiple_yolox"/>

  <group>
    <!-- LIDAR Driver -->
<!--    <include file="$(find-pkg-share f1tenth_sensor_kit_launch)/launch/lidar.launch.xml">-->
<!--      <arg name="launch_driver" value="$(var launch_driver)"/>-->
<!--      <arg name="vehicle_mirror_param_file" value="$(var vehicle_mirror_param_file)"/>-->
<!--      <arg name="pointcloud_container_name" value="$(var pointcloud_container_name)"/>-->
<!--    </include>-->

    <!-- LaserScan Driver -->
    <include file="$(find-pkg-share f1tenth_sensor_kit_launch)/launch/2d_lidar.launch.py">
      <arg name="lidar_config" value="$(find-pkg-share f1tenth_sensor_kit_launch)/config/laserscan/2d_lidar.param.yaml"/>
      <arg name="launch_filter" value="True"/>
      <arg name="laser_filter_config" value="$(find-pkg-share f1tenth_sensor_kit_launch)/config/laserscan/laser_filter.param.yaml"/>
    </include>

    <!-- Depth camera Driver -->
    <include file="$(find-pkg-share f1tenth_sensor_kit_launch)/launch/realsense_d435i.launch.py">
    </include>

    <!-- Monocular Camera Driver -->
    <!-- <include file="$(find-pkg-share f1tenth_sensor_kit_launch)/launch/camera.launch.xml">
      <arg name="launch_driver" value="$(var launch_driver)" />
    </include> -->

    <!-- IMU Driver -->
    <include file="$(find-pkg-share f1tenth_sensor_kit_launch)/launch/imu.launch.xml">
      <arg name="launch_driver" value="$(var launch_driver)"/>
    </include>

    <!-- Vehicle Velocity Converter  -->
    <include file="$(find-pkg-share vehicle_velocity_converter)/launch/vehicle_velocity_converter.launch.xml">
      <arg name="input_vehicle_velocity_topic" value="/vehicle/status/velocity_status"/>
      <arg name="output_twist_with_covariance" value="/sensing/vehicle_velocity_converter/twist_with_covariance"/>
    </include>

    <!-- Joystick control node -->
    <include file="$(find-pkg-share joy_controller)/launch/joy_controller.launch.xml">
      <arg name="config_file" value="$(find-pkg-share f1tenth_sensor_kit_launch)/config/joy/joy_controller.param.yaml"/>
      <arg name="input_joy" value="/sensing/joy"/>
      <arg name="joy_type" value="DS4"/>
      <arg name="input_odometry" value="/localization/kinematic_state" />
    </include>

    <!-- Tensorrt_yolo
    (https://autowarefoundation.github.io/autoware-documentation/pr-480/how-to-guides/integrating-autoware/creating-vehicle-and-sensor-model/creating-sensor-model/#camera-launching).
    Todo: launch in perception instead or add to realsense container (https://github.com/leo-drive/tutorial_vehicle_sensor_kit_launch/blob/main/common_sensor_launch/launch/camera_node_container.launch.py)
    Todo: add YOLO params -->
    <include file="$(find-pkg-share tensorrt_yolox)/launch/$(var yolox_launch_file).launch.xml"> <!-- -->
      <arg name="input/image" value="camera/color/image_raw"/>
<!--      <arg name="output/objects" value="/perception/object_recognition/detection/rois0"/>-->
<!--      <arg name="model_name" value="$(var yolox_model)"/>-->
<!--      <arg name="data_path" value="$(env HOME)/autoware_data" description="packages data and artifacts directory path"/>-->
<!--      <arg name="model_path" value="$(var data_path)/tensorrt_yolox"/>-->
<!--      <arg name="score_threshold" value="0.35"/>-->
<!--      <arg name="nms_threshold" value="0.7"/>-->
<!--      <arg name="precision" value="int8" description="operation precision to be used on inference. Valid value is one of: [fp32, fp16, int8]"/>-->
<!--      <arg name="calibration_algorithm" value="Entropy" description="Calibration algorithm to be used for quantization when precision==int8. Valid value is one of: [Entropy, (Legacy | Percentile), MinMax]" />-->
<!--      <arg name="clip_value" value="6.0" description="If positive value is specified, the value of each layer output will be clipped between [0.0, clip_value]. This option is valid only when precision==int8 and used to manually specify the dynamic range instead of using any calibration."  />-->
<!--      <arg name="preprocess_on_gpu" value="true" description="If true, pre-processing is performed on GPU"/>-->
<!--      <arg name="use_decompress" value="true" description="use image decompress"/>-->
<!--      <arg name="build_only" value="false" description="exit after trt engine is built"/>-->
    </include>
  </group>
</launch>
